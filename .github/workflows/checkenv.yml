name: Check Build Environment  # Name of the workflow for easy identification in GitHub Actions.

on:
  workflow_dispatch:  # This allows the workflow to be manually triggered from the GitHub Actions UI.

env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Securely pulls AWS Access Key ID from GitHub Secrets.
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Securely pulls AWS Secret Access Key from GitHub Secrets.
    AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}  # Defines the AWS region using a secret.

jobs:
  validate:  # Defines a job named 'validate' which will perform the environment checks.
    name: Check Environment  # Human-readable name for the job shown in GitHub Actions.
    runs-on: ubuntu-latest  # Specifies that the job runs on the latest Ubuntu GitHub-hosted runner.

    steps:
      - name: Checkout Code  # First step to pull down the repository code onto the runner.
        uses: actions/checkout@v3  # Uses the latest version of the official GitHub checkout action.

      - name: Setup Terraform  # Step to install and configure Terraform.
        uses: hashicorp/setup-terraform@v2  # Uses the official HashiCorp action to install Terraform.

      - name: Set up Docker Buildx  # Step to install Docker Buildx, a tool for advanced Docker builds.
        uses: docker/setup-buildx-action@v2  # Official Docker action to set up Buildx.
        with:
            install: true  # Ensures that Docker Buildx is installed on the runner.

      - name: Setup Packer  # Step to install HashiCorp Packer for creating machine images.
        uses: hashicorp/setup-packer@v2  # Uses the official HashiCorp action to install Packer.

      - name: Validate Build Environment  # Step to validate that all necessary tools are installed and AWS connectivity is working.
        run: |
            # Display the installed versions of AWS CLI, Terraform, Docker, and Packer to ensure they are correctly set up.
            aws --version  # Check if AWS CLI is installed and display its version.
            terraform --version  # Check if Terraform is installed and display its version.
            docker --version  # Check if Docker is installed and display its version.
            packer --version  # Check if Packer is installed and display its version.

            # List of required environment variables
            REQUIRED_VARS=("AWS_ACCESS_KEY_ID" "AWS_SECRET_ACCESS_KEY" "AWS_DEFAULT_REGION")

            # Loop through each variable and check if it's set
            for VAR in "${REQUIRED_VARS[@]}"; do
                if [ -z "${!VAR}" ]; then
                  echo "ERROR: Environment variable '$VAR' is not set."
                  exit -1
                fi
            done

            # If all variables are set, print success message
            echo "NOTE: All required environment variables are set."

            backend=$(grep -r 'backend ' ./01-ecr/*.tf || true)
            if [ -z "$backend" ]; then
              echo "ERROR: No terraform backend configuration is defined for 01-ecr."
              exit 1
            fi

            backend=$(grep -r 'backend ' ./03-apprunner/*.tf || true)
            if [ -z "$backend" ]; then
              echo "ERROR: No terraform backend configuration is defined for 03-apprunner."
              exit 1
            fi

            # If all backend checks are successful.

            echo "NOTE: All required backend files exist."

            echo "NOTE: Checking AWS CLI connection."  # Inform the user that AWS CLI connection is being tested.

            # Attempt to fetch the AWS account identity to verify that the credentials are correct and have the necessary permissions.
            ACCOUNT_ID=$(aws sts get-caller-identity --query "Account") 

            # Check if the previous AWS CLI command succeeded.
            if [ $? -ne 0 ]; then  # If the exit code is not zero, the command failed.
              echo "ERROR: Failed to connect to AWS. Please check your credentials and environment variables."  # Display an error message indicating AWS connection failure.
              exit 1  # Exit the script with an error code to fail the workflow.
            else
              echo "NOTE: Successfully logged into AWS."  # If the command succeeded, display a success message.
            fi
